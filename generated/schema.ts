// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExampleEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): ExampleEntity | null {
    return changetype<ExampleEntity | null>(store.get("ExampleEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get approved(): Bytes {
    let value = this.get("approved");
    return value!.toBytes();
  }

  set approved(value: Bytes) {
    this.set("approved", Value.fromBytes(value));
  }
}

export class BidExecuted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BidExecuted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BidExecuted must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BidExecuted", id.toString(), this);
    }
  }

  static load(id: string): BidExecuted | null {
    return changetype<BidExecuted | null>(store.get("BidExecuted", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }
}

export class BidOrderReturn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BidOrderReturn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BidOrderReturn must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BidOrderReturn", id.toString(), this);
    }
  }

  static load(id: string): BidOrderReturn | null {
    return changetype<BidOrderReturn | null>(store.get("BidOrderReturn", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bid_bidId(): BigInt {
    let value = this.get("bid_bidId");
    return value!.toBigInt();
  }

  set bid_bidId(value: BigInt) {
    this.set("bid_bidId", Value.fromBigInt(value));
  }

  get bid_saleId(): BigInt {
    let value = this.get("bid_saleId");
    return value!.toBigInt();
  }

  set bid_saleId(value: BigInt) {
    this.set("bid_saleId", Value.fromBigInt(value));
  }

  get bid_sellerAddress(): Bytes {
    let value = this.get("bid_sellerAddress");
    return value!.toBytes();
  }

  set bid_sellerAddress(value: Bytes) {
    this.set("bid_sellerAddress", Value.fromBytes(value));
  }

  get bid_buyerAddress(): Bytes {
    let value = this.get("bid_buyerAddress");
    return value!.toBytes();
  }

  set bid_buyerAddress(value: Bytes) {
    this.set("bid_buyerAddress", Value.fromBytes(value));
  }

  get bid_price(): BigInt {
    let value = this.get("bid_price");
    return value!.toBigInt();
  }

  set bid_price(value: BigInt) {
    this.set("bid_price", Value.fromBigInt(value));
  }

  get bid_withdrawn(): boolean {
    let value = this.get("bid_withdrawn");
    return value!.toBoolean();
  }

  set bid_withdrawn(value: boolean) {
    this.set("bid_withdrawn", Value.fromBoolean(value));
  }
}

export class Energize extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Energize entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Energize must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Energize", id.toString(), this);
    }
  }

  static load(id: string): Energize | null {
    return changetype<Energize | null>(store.get("Energize", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get erc20Contract(): Bytes {
    let value = this.get("erc20Contract");
    return value!.toBytes();
  }

  set erc20Contract(value: Bytes) {
    this.set("erc20Contract", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class ReleaseToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReleaseToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReleaseToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReleaseToken", id.toString(), this);
    }
  }

  static load(id: string): ReleaseToken | null {
    return changetype<ReleaseToken | null>(store.get("ReleaseToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get erc20Contract(): Bytes {
    let value = this.get("erc20Contract");
    return value!.toBytes();
  }

  set erc20Contract(value: Bytes) {
    this.set("erc20Contract", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class SetRoyalties extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SetRoyalties entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SetRoyalties must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SetRoyalties", id.toString(), this);
    }
  }

  static load(id: string): SetRoyalties | null {
    return changetype<SetRoyalties | null>(store.get("SetRoyalties", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get royalties(): Array<string> | null {
    let value = this.get("royalties");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set royalties(value: Array<string> | null) {
    if (!value) {
      this.unset("royalties");
    } else {
      this.set("royalties", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Royalities extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Royalities entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Royalities must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Royalities", id.toString(), this);
    }
  }

  static load(id: string): Royalities | null {
    return changetype<Royalities | null>(store.get("Royalities", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class TokenMetaReturn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenMetaReturn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenMetaReturn must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenMetaReturn", id.toString(), this);
    }
  }

  static load(id: string): TokenMetaReturn | null {
    return changetype<TokenMetaReturn | null>(store.get("TokenMetaReturn", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get data_saleId(): BigInt {
    let value = this.get("data_saleId");
    return value!.toBigInt();
  }

  set data_saleId(value: BigInt) {
    this.set("data_saleId", Value.fromBigInt(value));
  }

  get data_tokenContractAddress(): Bytes {
    let value = this.get("data_tokenContractAddress");
    return value!.toBytes();
  }

  set data_tokenContractAddress(value: Bytes) {
    this.set("data_tokenContractAddress", Value.fromBytes(value));
  }

  get data_tokenId(): BigInt {
    let value = this.get("data_tokenId");
    return value!.toBigInt();
  }

  set data_tokenId(value: BigInt) {
    this.set("data_tokenId", Value.fromBigInt(value));
  }

  get data_price(): BigInt {
    let value = this.get("data_price");
    return value!.toBigInt();
  }

  set data_price(value: BigInt) {
    this.set("data_price", Value.fromBigInt(value));
  }

  get data_directSale(): boolean {
    let value = this.get("data_directSale");
    return value!.toBoolean();
  }

  set data_directSale(value: boolean) {
    this.set("data_directSale", Value.fromBoolean(value));
  }

  get data_bidSale(): boolean {
    let value = this.get("data_bidSale");
    return value!.toBoolean();
  }

  set data_bidSale(value: boolean) {
    this.set("data_bidSale", Value.fromBoolean(value));
  }

  get data_status(): boolean {
    let value = this.get("data_status");
    return value!.toBoolean();
  }

  set data_status(value: boolean) {
    this.set("data_status", Value.fromBoolean(value));
  }

  get data_bidStartTime(): BigInt {
    let value = this.get("data_bidStartTime");
    return value!.toBigInt();
  }

  set data_bidStartTime(value: BigInt) {
    this.set("data_bidStartTime", Value.fromBigInt(value));
  }

  get data_bidEndTime(): BigInt {
    let value = this.get("data_bidEndTime");
    return value!.toBigInt();
  }

  set data_bidEndTime(value: BigInt) {
    this.set("data_bidEndTime", Value.fromBigInt(value));
  }

  get data_currentOwner(): Bytes {
    let value = this.get("data_currentOwner");
    return value!.toBytes();
  }

  set data_currentOwner(value: Bytes) {
    this.set("data_currentOwner", Value.fromBytes(value));
  }
}
